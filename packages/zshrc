# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/Users/cloudgenius/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="robbyrussell"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)
# See https://github.com/ohmyzsh/ohmyzsh/issues/5765
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  kubectl
  docker
  docker-compose
  macos
  npm
  zsh-autosuggestions
  zsh-syntax-highlighting
)

export ZSH_HIGHLIGHT_HIGHLIGHTERS_DIR=$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/highlighters
export ZSH_DISABLE_COMPFIX=true # https://github.com/ohmyzsh/ohmyzsh/issues/6835
source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

alias st='open -a SourceTree'

alias obs='open -a Obsidian'

alias cginstall="bash <(curl -s https://s3-us-west-2.amazonaws.com/cloudgeniuscode/install.sh)"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh


export NVM_DIR="$HOME/.nvm"
if [[ `uname -m` == 'arm64' ]]
then
  [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && . "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && . "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
else
  [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
fi

# place this after nvm initialization!
autoload -U add-zsh-hook
load-nvmrc() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc

if [[ `uname -m` == 'arm64' ]]
then
  [ -f /opt/homebrew/etc/profile.d/autojump.sh ] && . /opt/homebrew/etc/profile.d/autojump.sh
else
[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh
fi

### change purgehostkey to use ggrep instead of grep
# purgehostkey function needs gnu grep so install via brew and add this PATH
# PATH="/usr/local/opt/grep/libexec/gnubin:$PATH"
### change purgehostkey to use gcut instead of cut
# purgehostkey function needs gnu cut so install via brew install coreutils and add this PATH
# PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"

# https://gist.github.com/lvnilesh/f15fc7da0515a6c09c934b0046882618

# delete the bad host key from the previous ssh command
purgehostkey() {
  cmd=$history[$((HISTCMD-1))]
  lineno=$(eval $cmd 2>&1 | ggrep -oP 'known_hosts:\K\d+')
  known_hosts=~/.ssh/known_hosts
  host=$(sed -n "${lineno}p" $known_hosts | gcut --delimiter=' ' --fields=1)
  sed -i -e "${lineno}d" $known_hosts
  echo "Deleted $host from known_hosts:$lineno 🖥️🔑💥"
  eval $cmd -o StrictHostKeyChecking=accept-new
}

# Start Tor and switch the system-wide proxy settings in macOS
function starttor() {
	# 'Wi-Fi' or 'Ethernet' or 'Display Ethernet'
	INTERFACE=$(networksetup -listnetworkserviceorder | grep $(ifconfig | pcregrep -M -o '^[^\t:]+:([^\n]|\n\t)*status: active' | egrep -o -m 1 '^[^\t:]+') | awk -F  "(, )|(: )|[)]" '{print $2}')
	# Ask for the administrator password upfront
	sudo -v
	# Keep-alive: update existing `sudo` time stamp until finished
	while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
	sudo networksetup -setsocksfirewallproxy $INTERFACE 127.0.0.1 9050 off
	sudo networksetup -setsocksfirewallproxystate $INTERFACE on
	echo "$(tput setaf 64)" # green
	echo "SOCKS proxy 127.0.0.1:9050 enabled."
	echo "$(tput setaf 136)" # orange
	echo "Starting Tor..."
	echo "$(tput sgr0)" # color reset
	tor && stoptor
}

function stoptor() {
	sudo networksetup -setsocksfirewallproxystate $INTERFACE off
	echo "$(tput setaf 64)" #green
	echo "SOCKS proxy disabled."
	echo "$(tput sgr0)" # color reset
}



## golang
mkdir -p $HOME/go/{bin,src,pkg}
export GOPATH=$HOME/go
export GOROOT="$(brew --prefix golang)/libexec"
export PATH="$PATH:${GOPATH}/bin:${GOROOT}/bin"


# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/homebrew/Caskroom/miniforge/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/conda.sh" ]; then
        . "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/conda.sh"
    else
        export PATH="/opt/homebrew/Caskroom/miniforge/base/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

if [[ `uname -m` == 'arm64' ]]
then
  export PATH="/opt/homebrew/opt/awscli@1/bin:$PATH"
else
  export PATH="/usr/local/opt/awscli@1/bin:$PATH"
fi


if [[ `uname -m` == 'arm64' ]]
then
  [[ -s "/opt/homebrew/etc/grc.zsh" ]] && source /opt/homebrew/etc/grc.zsh
else
  [[ -s "/usr/local/etc/grc.zsh" ]] && source /usr/local/etc/grc.zsh
fi

# grc seems to be causing problems with kubectl podname completion
# so we not let it mess with kubectl coloring
# see fix_grc_for_kubectl in setup
# instead use an alternative method https://github.com/dty1er/kubecolor

command -v kubecolor >/dev/null 2>&1 && alias kubectl="kubecolor"
# make completion work with kubecolor
compdef kubecolor=kubectl

# topten

function commands() {
  awk '{a[$2]++}END{for(i in a){print a[i] " " i}}'
}
alias topten="history | commands | sort -rn | head"

bindkey '^[f' forward-word
bindkey '^[b' backward-word


if [[ `uname -m` == 'arm64' ]]
then
  # The next line updates PATH for the Google Cloud SDK.
  if [ -f '/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc' ]; then source '/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc'; fi
  # The next line enables shell command completion for gcloud.
  if [ -f '/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc' ]; then source '/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc'; fi
else
  # The next line updates PATH for the Google Cloud SDK.
  if [ -f '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc' ]; then source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc'; fi
  # The next line enables shell command completion for gcloud.
  if [ -f '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc' ]; then source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc'; fi
fi


# alias nilesh="gcloud config set account nilesh@cloudgeni.us && gcloud config list && rm -rf ~/.kube && gcloud container clusters get-credentials  dooker --project prod-186723 --region us-west1-a && kubectl get no"
# alias eeshan="gcloud config set account eeshan@cloudgeni.us && gcloud config list && rm -rf ~/.kube && gcloud container clusters get-credentials andromeda --zone us-west1-a --project oceanic-isotope-233522"

# Get OS X Software Updates, and update installed Ruby gems, Homebrew and their installed packages
# alias update='sudo softwareupdate -i -a; brew update; brew upgrade ; brew cleanup; brew doctor'
alias update='brew update; brew upgrade ; brew cleanup; brew doctor'

# Clean up LaunchServices to remove duplicates in the “Open With” menu
alias lscleanup="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"
alias dkill="osascript -e 'quit app \"Docker\"'"
alias ckill="osascript -e 'quit app \"Visual Studio Code\"'"

export GITHUB_USERNAME="lvnilesh"
export KUBE_EDITOR="codium -w"
alias code=codium
export EDITOR=vi
# export EDITOR="/usr/local/bin/mate -w"

# pyenv
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

alias brew='env PATH="${PATH//$(pyenv root)\/shims:/}" brew'

# pyenv-virtualenv
if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi

# pipenv

export PATH=$HOME/.local/bin:$HOME/bin:$PATH

# Homebrew's "sbin"  in /usr/local/sbin PATH

if [[ `uname -m` == 'arm64' ]]
then
  export PATH="opt/homebrew/sbin:$PATH"
  export PATH="/opt/homebrew/opt/curl/bin:$PATH"
else
  export PATH="/usr/local/sbin:$PATH"
  export PATH="/usr/local/opt/curl/bin:$PATH"
fi

#export DOCKER_HOST=ssh://nuc

eval "$(/usr/libexec/path_helper)"


# hcloud

# mkdir -p ~/.config/hcloud/completion/zsh
# hcloud completion zsh > ~/.config/hcloud/completion/zsh/_hcloud
export HCLOUD_TOKEN=tjIlVSFXgBhxvAulIYpZzo6GAmFFupFDWSmsKu1gK8TrcfHaFbx8FxOIMIuTKt4b
export TF_VAR_token=tjIlVSFXgBhxvAulIYpZzo6GAmFFupFDWSmsKu1gK8TrcfHaFbx8FxOIMIuTKt4b
export TF_VAR_location=hil
export TF_VAR_name=tcs
export TF_VAR_user_name=cloudgenius

# HCLOUD_CONTEXT
# HCLOUD_CONFIG

fpath+=(~/.config/hcloud/completion/zsh)
#  ... anything else that needs to be done before compinit
autoload -Uz compinit; compinit

export USE_GKE_GCLOUD_AUTH_PLUGIN=True

# echo "Setting PATH so that homebrew/bin occurs before /usr/bin"
if [[ `uname -m` == 'arm64' ]]
then
	export PATH="/opt/homebrew/bin:$PATH"
else
	export PATH="/usr/local/bin:$PATH"
fi


# https://fluxcd.io/flux/cmd/flux_completion_zsh/

# To configure your zsh shell to load flux completions for each session add to your zshrc

# ~/.zshrc or ~/.profile
command -v flux >/dev/null && . <(flux completion zsh)
export PATH="/opt/homebrew/opt/curl/bin:$PATH"

alias ns="kubie ns"
alias kcc="kubie ctx"

export SOPS_AGE_KEY_FILE=~/.config/sops/age/keys.txt

export GPG_TTY=$(tty)
export PATH="/opt/homebrew/opt/mysql-client/bin:$PATH"

eval "$(rbenv init - zsh)"

# Autoload zsh shell functions defined in the function path
fpath=( ~/.zsh_autoload_functions "${fpath[@]}" )
autoload -Uz load_secrets

if grep -q 'auth sufficient pam_tid.so' /etc/pam.d/sudo; then
    echo "Touch ID is enabled for sudo"
else
    sudo grep -q -F 'auth sufficient pam_tid.so' /etc/pam.d/sudo || sudo sed -i '' '2i\
auth sufficient pam_tid.so
    ' /etc/pam.d/sudo
    if grep -q 'auth sufficient pam_tid.so' /etc/pam.d/sudo; then
        echo "'auth sufficient pam_tid.so' added to /etc/pam.d/sudo - This enables Touch ID for sudo"
    fi
fi



# A small plugin for parsing Conda environments into OMZ themes
# The idea is to be able to add this plugin to your favorite OMZ theme
# In addition to the regular conda config info, this plugin gives the current python version

# the prompt
function conda_prompt_info() {
  echo "${ZSH_THEME_CONDA_PROMPT_PREFIX}$(conda_env)${ZSH_THEME_CONDA_PROMPT_SEPARATOR}$(conda_py_ver)${ZSH_THEME_CONDA_PROMPT_SUFFIX}"
}

# a simpler prompt (this is the more tradtional version)
function conda_env_prompt_info() {
  echo "${ZSH_THEME_CONDA_PROMPT_PREFIX}$(conda_env)${ZSH_THEME_CONDA_PROMPT_SUFFIX}"
}

# Conda evniornment
function conda_env() {
  if [[ -n ${CONDA_DEFAULT_ENV} ]]; then
    echo ${CONDA_DEFAULT_ENV}
  fi
}

# Python version
function conda_py_ver() {
  if [[ -n ${CONDA_DEFAULT_ENV} ]]; then
    echo "py:$(python -V | cut -d ' ' -f 2)"
  fi
}

# Conda aliases

alias cel='conda env list'
alias ccreate='conda create python=3.11 -y --name'
alias cdel='conda env remove --name'

alias cact='conda activate'
alias cdeact='conda deactivate'

alias conup='conda update'
alias conin='conda install'
alias cls='conda list'


# Default values for the appearance of the prompt. Customize in your theme if you like.
ZSH_THEME_CONDA_PROMPT_PREFIX="%{$FG[028]%}("
ZSH_THEME_CONDA_PROMPT_SUFFIX=")%{$reset_color%}"
ZSH_THEME_CONDA_PROMPT_SEPARATOR="|"


#Disable conda prompt changes
#https://conda.io/docs/user-guide/configuration/use-condarc.html#change-command-prompt-changeps1
#changeps1: False
#`conda config --set changeps1 false`


export COQUI_STUDIO_TOKEN=NhqpH2QRz4Ad5TH3hmh1WCJ4YHBwEHuFtouziXI1IIqAWrGqe1iHPdqekZzPOabG

# export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"

export PATH="/opt/homebrew/opt/mongodb-community@5.0/bin:$PATH"
export PATH="/opt/homebrew/opt/curl/bin:$PATH"
