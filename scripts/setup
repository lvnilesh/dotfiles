#!/bin/bash -e

# Install brew dependencies.
install_brew() {
  echo "Running brew..."
  brew bundle --file=brew/Brewfile
}

# Fix grc for kubectl colorizing
fix_grc_for_kubectl() {
  # remove kubectl reference from grc

  if [[ `uname -m` == 'arm64' ]]
  then
    sed -i '' '/kubectl/d' /opt/homebrew/etc/grc.zsh
  else
    sed -i '' '/kubectl/d' /usr/local/etc/grc.zsh
  fi
}

# Install oh-my-zsh.
install_oh-my-zsh() {
  DIR="$HOME/.oh-my-zsh"
  if [ -d "$DIR" ]; then
    echo "Existing installation found in  ${DIR}...updating oh-my-zsh."
    $ZSH/tools/upgrade.sh

	rm -rf ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
	git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
    rm -rf ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
	git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting

    return 0;
  else
    echo "Installing oh-my-zsh..."
    # Install oh-my-zsh.
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
    return 0;
  fi
}

# Install powerlevel10k.
install_powerlevel10k() {
  DIR="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k"
  if [ -d "$DIR" ]; then
    echo "Existing installation found in  ${DIR}...updating p10k via a git pull."
    git -C ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k pull
    return 0;
  else
    echo "Installing powerlevel10k..."
    # Install powerlevel10k.
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
    return 0;
  fi
}

# Setup rc files.
symlink_dotfiles() {
  echo "Symlinking dotfiles..."
  rcup -fvd packages | nl -bn
}

# Configure VS code fonts and extensions.
configure_vscode() {
  echo "Applying Cloud Genius VS Code style..."
  if [[ `uname -m` == 'arm64' ]]
  then
    ln -sf "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code" /opt/homebrew/bin/code
  else
    ln -sf "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code" /usr/local/bin/code
  fi

#   codium --install-extension dendron.dendron
#   codium --install-extension dendron.dendron-markdown-shortcuts
#   codium --install-extension dendron.dendron-paste-image
  codium --install-extension jeanp413.open-remote-ssh
  codium --install-extension redhat.vscode-yaml

  codium --install-extension aaron-bond.better-comments
  codium --install-extension asciidoctor.asciidoctor-vscode
  codium --install-extension bierner.markdown-mermaid
#   codium --install-extension ms-vscode-remote.remote-containers
  codium --install-extension esbenp.prettier-vscode
  codium --install-extension christian-kohler.path-intellisense
  codium --install-extension dracula-theme.theme-dracula
#   codium --install-extension eamodio.gitlens
  codium --install-extension mhutchie.git-graph
#   codium --install-extension ms-vscode-remote.remote-ssh
  codium --install-extension oderwat.indent-rainbow
  codium --install-extension PKief.material-icon-theme
  codium --install-extension vscode-icons-team.vscode-icons
  codium --install-extension esbenp.prettier-vscode

  code --install-extension aaron-bond.better-comments
  code --install-extension asciidoctor.asciidoctor-vscode
  code --install-extension bierner.markdown-mermaid
  code --install-extension ms-vscode-remote.remote-containers
  code --install-extension esbenp.prettier-vscode
  code --install-extension christian-kohler.path-intellisense

  code --install-extension dracula-theme.theme-dracula
  code --install-extension eamodio.gitlens
  code --install-extension mhutchie.git-graph
  code --install-extension ms-vscode-remote.remote-ssh
  code --install-extension oderwat.indent-rainbow
  code --install-extension PKief.material-icon-theme
  code --install-extension vscode-icons-team.vscode-icons
  code --install-extension esbenp.prettier-vscode


  cd ~/Library/Fonts && {
    rm -rf MesloLGS*.ttf
    wget "https://cloudgeniuscode.s3-us-west-2.amazonaws.com/MesloLGS NF Regular.ttf"
    wget "https://cloudgeniuscode.s3-us-west-2.amazonaws.com/MesloLGS NF Italic.ttf"
    wget "https://cloudgeniuscode.s3-us-west-2.amazonaws.com/MesloLGS NF Bold.ttf"
    wget "https://cloudgeniuscode.s3-us-west-2.amazonaws.com/MesloLGS NF Bold Italic.ttf"
    cd -;
  }

  rm -rf settings.json
  curl -O https://s3-us-west-2.amazonaws.com/cloudgeniuscode/settings.json
  cp -f settings.json "$HOME/Library/Application Support/VSCodium/User/"
  mv -f settings.json "$HOME/Library/Application Support/Code/User/"

# scripts/set-terminal-font
}

# Install node lts using nvm
nvminstall() {
  echo "installing node lts using nvm..."

  if [[ `uname -m` == 'arm64' ]]
  then
    [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && . "/opt/homebrew/opt/nvm/nvm.sh" && nvm install v14
  else
    [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh" && nvm install v14
  fi
}

# set obsidian cron
set_obsidian_cron() {

    # https://medium.com/analytics-vidhya/how-i-put-my-mind-under-version-control-24caea37b8a5
    # https://osxdaily.com/2020/04/27/fix-cron-permissions-macos-full-disk-access/
    # https://gist.github.com/tallguyjenks/ca3339b8b5353159f631836268e3f791

    mkdir -p ~/.local/bin
    echo "placing obsidian_sync in ~/.local/bin"
    cp scripts/obsidian_sync ~/.local/bin

    if [[ $(crontab -l | egrep -v "^(#|$)" | grep -q '/Users/cloudgenius/.local/bin/obsidian_sync'; echo $?) == 1 ]]
    then
        echo "setting crontab for obsidian"
        set -f
        echo $(crontab -l ; echo '*/30 * * * * /Users/cloudgenius/.local/bin/obsidian_sync >/dev/null 2>&1') | crontab -
        set +f
    else
        echo "crontab is already set for obsidian"
    fi
}

# example ssh config
install_sshconfig_example() {
echo "adding example ssh config"
rm -rf ~/.ssh/config.example
tee -a ~/.ssh/config.example  << END
Host jumpbox
HostName 52.25.136.2
ForwardAgent yes
StrictHostKeyChecking ask
IdentityFile ~/.ssh/id_rsa
User ec2-user

Host 10.0.10.251
ProxyCommand ssh -q -W %h:%p jumpbox
ForwardAgent yes
IdentityFile ~/.ssh/id_rsa
User ubuntu
END
}

# Configure macOS defaults.
configure_macos() {
  echo "Applying macOS defaults..."
  source macos/defaults
}

# Configure duti default file handlers.
configure_duti() {
  echo "Applying duti defaults..."

  # VS Code
  local vsCodeExtensions=(json md py sh yaml yml)
  for extension in "${vsCodeExtensions[@]}"
  do
    duti -s com.microsoft.VSCode .${extension} all
  done

  # The Unarchiver
  local unarchiverExtensions=(zip rar)
  for extension in "${unarchiverExtensions[@]}"
  do
    duti -s com.macpaw.site.theunarchiver .${extension} all
  done
}

# Configure kubie defaults.
configure_kubie() {
  echo "Applying kubie defaults..."
  gcloud components install kubectl -q

  if [[ `uname -m` == 'arm64' ]]
  then
	sudo rm -rf /usr/local/bin
	sudo ln -s /opt/homebrew/bin /usr/local/bin
	if [ ! -f '/opt/homebrew/bin/kubectl' ]; then
		ln /opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin/kubectl /opt/homebrew/bin
	fi
  else
  	if [ ! -f '/usr/local/bin/kubectl' ]; then
		ln /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin/kubectl /usr/local/bin/kubectl
	fi
  fi

  mkdir -p ~/.kube
  cp macos/kubie.yaml ~/.kube/kubie.yaml
}



# setup_zsh_autoload_functions
setup_zsh_autoload_functions() {
  echo "setting up zsh_autoload_functions..."
  mkdir -p ~/.zsh_autoload_functions
  cp -f load_secrets ~/.zsh_autoload_functions
}

install_brew
fix_grc_for_kubectl
install_oh-my-zsh
install_powerlevel10k
symlink_dotfiles
nvminstall
# set_obsidian_cron
install_sshconfig_example
configure_vscode
configure_macos
configure_duti
configure_kubie
setup_zsh_autoload_functions
